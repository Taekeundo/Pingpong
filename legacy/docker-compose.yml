services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: transcendence_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: transcendence
      POSTGRES_PASSWORD: secretpassword
      POSTGRES_DB: transcendence_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # WICHTIG: Bestehende Migrations automatisch ausf√ºhren
      # - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transcendence"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # Backend Service
  backend:
    build: ./backend
    container_name: transcendence_backend
    restart: always
    ports:
      - "5000:5000"
    environment:
      DB_TYPE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: transcendence
      DB_PASSWORD: secretpassword
      DB_NAME: transcendence_db
      NODE_ENV: development
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # Frontend Service
  frontend:
    build: ./frontend
    container_name: transcendence_frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Proxy Service
  proxy:
    image: nginx:alpine
    container_name: transcendence_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Database Admin (Development)
  adminer:
    image: adminer:latest
    container_name: transcendence_adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres

volumes:
  postgres_data: